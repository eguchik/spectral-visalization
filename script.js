const inputFile = document.getElementById('inputFile');
const reader = new FileReader();
let spectra = [];
let sampleName = [];
let nSample = [];
let xdata = [];
let lines = [];
let layout = {};
let trace = {};

const colorPalette = ['rgb(0.5, 0.0, 1.0)', 'rgb(0.49215686274509807, 0.012319659535238442, 0.9999810273487268)', 'rgb(0.4843137254901961, 0.02463744919538197, 0.9999241101148306)', 'rgb(0.4764705882352941, 0.03695149938914489, 0.9998292504580527)', 'rgb(0.46862745098039216, 0.04925994109281685, 0.9996964519778716)', 'rgb(0.4607843137254902, 0.061560906133942835, 0.9995257197133659)', 'rgb(0.45294117647058824, 0.07385252747487396, 0.9993170601430229)', 'rgb(0.44509803921568625, 0.08613293949614599, 0.9990704811844932)', 'rgb(0.4372549019607843, 0.0984002782796427, 0.99878599219429)', 'rgb(0.4294117647058824, 0.11065268189150083, 0.9984636039674339)', 'rgb(0.4215686274509804, 0.12288829066471411, 0.9981033287370441)', 'rgb(0.4137254901960784, 0.13510524748139296, 0.9977051801738729)', 'rgb(0.40588235294117647, 0.1473016980546375, 0.997269173385788)', 'rgb(0.39803921568627454, 0.1594757912099808, 0.9967953249171991)', 'rgb(0.39019607843137255, 0.1716256791663596, 0.9962836527484294)', 'rgb(0.38235294117647056, 0.18374951781657034, 0.9957341762950345)', 'rgb(0.37450980392156863, 0.19584546700716696, 0.9951469164070644)', 'rgb(0.3666666666666667, 0.20791169081775931, 0.9945218953682733)', 'rgb(0.3588235294117647, 0.2199463578396686, 0.9938591368952737)', 'rgb(0.3509803921568627, 0.23194764145389815, 0.9931586661366362)', 'rgb(0.3431372549019608, 0.24391372010837714, 0.9924205096719357)', 'rgb(0.33529411764705885, 0.2558427775944356, 0.9916446955107427)', 'rgb(0.32745098039215687, 0.2677330033224679, 0.9908312530915603)', 'rgb(0.3196078431372549, 0.2795825925967438, 0.989980213280707)', 'rgb(0.31176470588235294, 0.2913897468893246, 0.989091608371146)', 'rgb(0.303921568627451, 0.30315267411304353, 0.9881654720812594)', 'rgb(0.296078431372549, 0.31486958889350786, 0.987201839553569)', 'rgb(0.28823529411764703, 0.3265387128400833, 0.9862007473534026)', 'rgb(0.2803921568627451, 0.33815827481581706, 0.9851622334675065)', 'rgb(0.27254901960784317, 0.34972651120626114, 0.9840863373026044)', 'rgb(0.2647058823529412, 0.3612416661871529, 0.9829730996839018)', 'rgb(0.2568627450980392, 0.37270199199091397, 0.9818225628535369)', 'rgb(0.24901960784313726, 0.38410574917192586, 0.9806347704689777)', 'rgb(0.24117647058823533, 0.3954512068705425, 0.9794097676013659)', 'rgb(0.23333333333333334, 0.40673664307580015, 0.9781476007338057)', 'rgb(0.22549019607843135, 0.41796034488678346, 0.9768483177596007)', 'rgb(0.21764705882352942, 0.42912060877260894, 0.9755119679804366)', 'rgb(0.20980392156862748, 0.44021574083098725, 0.9741386021045101)', 'rgb(0.2019607843137255, 0.45124405704532283, 0.9727282722446048)', 'rgb(0.1941176470588235, 0.4622038835403132, 0.9712810319161138)', 'rgb(0.18627450980392157, 0.47309355683601007, 0.9697969360350095)', 'rgb(0.17843137254901964, 0.4839114241003015, 0.9682760409157589)', 'rgb(0.17058823529411765, 0.4946558433997788, 0.9667184042691874)', 'rgb(0.16274509803921566, 0.5053251839489481, 0.965124085200289)', 'rgb(0.15490196078431373, 0.5159178263577511, 0.9634931442059831)', 'rgb(0.1470588235294118, 0.5264321628773557, 0.961825643172819)', 'rgb(0.1392156862745098, 0.53686659764418, 0.9601216453746282)', 'rgb(0.13137254901960782, 0.5472195469221112, 0.9583812154701222)', 'rgb(0.12352941176470589, 0.5574894393428855, 0.9566044195004408)', 'rgb(0.11568627450980395, 0.5676747161445901, 0.9547913248866443)', 'rgb(0.10784313725490197, 0.5777738314082511, 0.9529420004271566)', 'rgb(0.09999999999999998, 0.5877852522924731, 0.9510565162951535)', 'rgb(0.09215686274509804, 0.5977074592660936, 0.9491349440359013)', 'rgb(0.08431372549019611, 0.6075389463388168, 0.9471773565640402)', 'rgb(0.07647058823529412, 0.6172782212897929, 0.9451838281608196)', 'rgb(0.06862745098039214, 0.6269238058941065, 0.9431544344712774)', 'rgb(0.0607843137254902, 0.6364742361471414, 0.9410892525013717)', 'rgb(0.05294117647058827, 0.6459280624867872, 0.9389883606150565)', 'rgb(0.04509803921568628, 0.6552838500134536, 0.9368518385313106)', 'rgb(0.03725490196078429, 0.664540178707858, 0.9346797673211106)', 'rgb(0.02941176470588236, 0.6736956436465572, 0.9324722294043558)', 'rgb(0.021568627450980427, 0.6827488552151855, 0.9302293085467404)', 'rgb(0.013725490196078438, 0.6916984393193699, 0.9279510898565747)', 'rgb(0.00588235294117645, 0.700543037593291, 0.9256376597815563)', 'rgb(0.0019607843137254832, 0.7092813076058534, 0.9232891061054893)', 'rgb(0.009803921568627416, 0.7179119230644418, 0.9209055179449537)', 'rgb(0.01764705882352935, 0.7264335740162241, 0.918486985745923)', 'rgb(0.025490196078431393, 0.7348449670469757, 0.9160336012803335)', 'rgb(0.033333333333333326, 0.7431448254773941, 0.9135454576426009)', 'rgb(0.04117647058823526, 0.7513318895568732, 0.9110226492460883)', 'rgb(0.0490196078431373, 0.7594049166547072, 0.9084652718195236)', 'rgb(0.056862745098039236, 0.7673626814486969, 0.9058734224033671)', 'rgb(0.06470588235294117, 0.7752039761111298, 0.9032471993461288)', 'rgb(0.0725490196078431, 0.7829276104921027, 0.9005867023006374)', 'rgb(0.08039215686274503, 0.7905324123001632, 0.8978920322202582)', 'rgb(0.08823529411764708, 0.7980172272802395, 0.8951632913550623)', 'rgb(0.09607843137254901, 0.8053809193888326, 0.8924005832479478)', 'rgb(0.10392156862745094, 0.8126223709664456, 0.8896040127307095)', 'rgb(0.11176470588235299, 0.8197404829072211, 0.8867736859200619)', 'rgb(0.11960784313725492, 0.8267341748257635, 0.883909710213612)', 'rgb(0.12745098039215685, 0.8336023852211195, 0.8810121942857845)', 'rgb(0.1352941176470588, 0.8403440716378927, 0.8780812480836979)', 'rgb(0.14313725490196072, 0.846958210824467, 0.8751169828229928)', 'rgb(0.15098039215686276, 0.8534437988883159, 0.8721195109836108)', 'rgb(0.1588235294117647, 0.8597998514483723, 0.8690889463055284)', 'rgb(0.16666666666666663, 0.8660254037844386, 0.8660254037844387)', 'rgb(0.17450980392156867, 0.8721195109836108, 0.8629289996673897)', 'rgb(0.1823529411764706, 0.8780812480836979, 0.8597998514483725)', 'rgb(0.19019607843137254, 0.883909710213612, 0.8566380778638628)', 'rgb(0.19803921568627447, 0.8896040127307095, 0.853443798888316)', 'rgb(0.2058823529411764, 0.8951632913550623, 0.8502171357296142)', 'rgb(0.21372549019607845, 0.9005867023006374, 0.8469582108244671)', 'rgb(0.22156862745098038, 0.9058734224033671, 0.8436671478337664)', 'rgb(0.22941176470588232, 0.9110226492460882, 0.8403440716378927)', 'rgb(0.23725490196078436, 0.9160336012803335, 0.8369891083319778)', 'rgb(0.2450980392156863, 0.9209055179449536, 0.8336023852211195)', 'rgb(0.2529411764705882, 0.9256376597815562, 0.8301840308155507)', 'rgb(0.26078431372549016, 0.9302293085467402, 0.8267341748257635)', 'rgb(0.2686274509803921, 0.9346797673211106, 0.8232529481575873)', 'rgb(0.27647058823529413, 0.9389883606150565, 0.8197404829072211)', 'rgb(0.28431372549019607, 0.9431544344712774, 0.8161969123562217)', 'rgb(0.292156862745098, 0.9471773565640402, 0.8126223709664456)', 'rgb(0.30000000000000004, 0.9510565162951535, 0.8090169943749475)', 'rgb(0.307843137254902, 0.9547913248866443, 0.8053809193888326)', 'rgb(0.3156862745098039, 0.9583812154701222, 0.8017142839800667)', 'rgb(0.32352941176470584, 0.961825643172819, 0.7980172272802396)', 'rgb(0.3313725490196078, 0.965124085200289, 0.7942898895752861)', 'rgb(0.3392156862745098, 0.9682760409157589, 0.7905324123001634)', 'rgb(0.34705882352941175, 0.9712810319161138, 0.7867449380334832)', 'rgb(0.3549019607843137, 0.9741386021045101, 0.7829276104921028)', 'rgb(0.36274509803921573, 0.9768483177596007, 0.7790805745256704)', 'rgb(0.37058823529411766, 0.9794097676013659, 0.7752039761111298)', 'rgb(0.3784313725490196, 0.9818225628535369, 0.7712979623471807)', 'rgb(0.38627450980392153, 0.9840863373026044, 0.767362681448697)', 'rgb(0.39411764705882346, 0.9862007473534026, 0.763398282741103)', 'rgb(0.4019607843137255, 0.9881654720812594, 0.7594049166547071)', 'rgb(0.40980392156862744, 0.989980213280707, 0.7553827347189938)', 'rgb(0.41764705882352937, 0.9916446955107427, 0.7513318895568734)', 'rgb(0.4254901960784314, 0.9931586661366362, 0.747252534878891)', 'rgb(0.43333333333333335, 0.9945218953682733, 0.7431448254773942)', 'rgb(0.4411764705882353, 0.9957341762950345, 0.7390089172206591)', 'rgb(0.4490196078431372, 0.9967953249171991, 0.7348449670469758)', 'rgb(0.45686274509803915, 0.9977051801738729, 0.7306531329586932)', 'rgb(0.4647058823529412, 0.9984636039674339, 0.7264335740162242)', 'rgb(0.4725490196078431, 0.9990704811844932, 0.7221864503320093)', 'rgb(0.48039215686274506, 0.9995257197133659, 0.717911923064442)', 'rgb(0.4882352941176471, 0.9998292504580527, 0.7136101544117524)', 'rgb(0.49607843137254903, 0.9999810273487268, 0.7092813076058535)', 'rgb(0.503921568627451, 0.9999810273487268, 0.7049255469061472)', 'rgb(0.5117647058823529, 0.9998292504580527, 0.700543037593291)', 'rgb(0.5196078431372548, 0.9995257197133659, 0.6961339459629267)', 'rgb(0.5274509803921568, 0.9990704811844932, 0.6916984393193701)', 'rgb(0.5352941176470587, 0.9984636039674339, 0.6872366859692628)', 'rgb(0.5431372549019609, 0.9977051801738729, 0.6827488552151855)', 'rgb(0.5509803921568628, 0.9967953249171991, 0.678235117349234)', 'rgb(0.5588235294117647, 0.9957341762950346, 0.6736956436465572)', 'rgb(0.5666666666666667, 0.9945218953682734, 0.6691306063588582)', 'rgb(0.5745098039215686, 0.9931586661366362, 0.6645401787078581)', 'rgb(0.5823529411764705, 0.9916446955107427, 0.6599245348787227)', 'rgb(0.5901960784313725, 0.989980213280707, 0.6552838500134537)', 'rgb(0.5980392156862746, 0.9881654720812594, 0.650618300204242)', 'rgb(0.6058823529411765, 0.9862007473534026, 0.6459280624867872)', 'rgb(0.6137254901960785, 0.9840863373026044, 0.6412133148335784)', 'rgb(0.6215686274509804, 0.9818225628535369, 0.6364742361471414)', 'rgb(0.6294117647058823, 0.9794097676013659, 0.631711006253251)', 'rgb(0.6372549019607843, 0.9768483177596008, 0.6269238058941066)', 'rgb(0.6450980392156862, 0.9741386021045102, 0.622112816721474)', 'rgb(0.6529411764705881, 0.9712810319161139, 0.617278221289793)', 'rgb(0.6607843137254901, 0.9682760409157589, 0.6124202030492502)', 'rgb(0.6686274509803922, 0.965124085200289, 0.6075389463388169)', 'rgb(0.6764705882352942, 0.961825643172819, 0.6026346363792564)', 'rgb(0.6843137254901961, 0.9583812154701222, 0.5977074592660936)', 'rgb(0.692156862745098, 0.9547913248866443, 0.5927576019625549)', 'rgb(0.7, 0.9510565162951536, 0.5877852522924731)', 'rgb(0.7078431372549019, 0.9471773565640402, 0.582790598933161)', 'rgb(0.7156862745098038, 0.9431544344712776, 0.5777738314082511)', 'rgb(0.723529411764706, 0.9389883606150565, 0.5727351400805052)', 'rgb(0.7313725490196079, 0.9346797673211106, 0.5676747161445901)', 'rgb(0.7392156862745098, 0.9302293085467404, 0.5625927516198231)', 'rgb(0.7470588235294118, 0.9256376597815563, 0.5574894393428855)', 'rgb(0.7549019607843137, 0.9209055179449537, 0.5523649729605059)', 'rgb(0.7627450980392156, 0.9160336012803335, 0.5472195469221112)', 'rgb(0.7705882352941176, 0.9110226492460884, 0.5420533564724495)', 'rgb(0.7784313725490195, 0.9058734224033673, 0.5368665976441802)', 'rgb(0.7862745098039214, 0.9005867023006376, 0.5316594672504363)', 'rgb(0.7941176470588236, 0.8951632913550623, 0.5264321628773558)', 'rgb(0.8019607843137255, 0.8896040127307095, 0.5211848828765852)', 'rgb(0.8098039215686275, 0.8839097102136121, 0.5159178263577512)', 'rgb(0.8176470588235294, 0.878081248083698, 0.510631193180907)', 'rgb(0.8254901960784313, 0.872119510983611, 0.5053251839489481)', 'rgb(0.8333333333333333, 0.8660254037844387, 0.5000000000000001)', 'rgb(0.8411764705882352, 0.8597998514483726, 0.49465584339977897)', 'rgb(0.8490196078431373, 0.8534437988883159, 0.4892929169339235)', 'rgb(0.8568627450980393, 0.8469582108244671, 0.4839114241003016)', 'rgb(0.8647058823529412, 0.8403440716378927, 0.4785115691012865)', 'rgb(0.8725490196078431, 0.8336023852211195, 0.47309355683601007)', 'rgb(0.8803921568627451, 0.8267341748257635, 0.4676575928925868)', 'rgb(0.888235294117647, 0.8197404829072211, 0.4622038835403132)', 'rgb(0.896078431372549, 0.8126223709664456, 0.45673263572184064)', 'rgb(0.9039215686274509, 0.8053809193888327, 0.45124405704532283)', 'rgb(0.9117647058823528, 0.7980172272802396, 0.4457383557765383)', 'rgb(0.919607843137255, 0.7905324123001635, 0.4402157408309874)', 'rgb(0.9274509803921569, 0.7829276104921029, 0.43467642176596505)', 'rgb(0.9352941176470588, 0.77520397611113, 0.42912060877260905)', 'rgb(0.9431372549019608, 0.7673626814486971, 0.4235485126679244)', 'rgb(0.9509803921568627, 0.7594049166547073, 0.4179603448867836)', 'rgb(0.9588235294117646, 0.7513318895568735, 0.41235631747390367)', 'rgb(0.9666666666666666, 0.7431448254773945, 0.4067366430758004)', 'rgb(0.9745098039215687, 0.7348449670469757, 0.4011015349327188)', 'rgb(0.9823529411764707, 0.7264335740162241, 0.3954512068705426)', 'rgb(0.9901960784313726, 0.717911923064442, 0.3897858732926794)', 'rgb(0.9980392156862745, 0.7092813076058535, 0.3841057491719259)', 'rgb(1.0, 0.7005430375932911, 0.37841105004231035)', 'rgb(1.0, 0.6916984393193701, 0.3727019919909141)', 'rgb(1.0, 0.6827488552151856, 0.3669787916496722)', 'rgb(1.0, 0.6736956436465574, 0.36124166618715303)', 'rgb(1.0, 0.6645401787078582, 0.35549083330031817)', 'rgb(1.0, 0.6552838500134535, 0.3497265112062611)', 'rgb(1.0, 0.6459280624867872, 0.34394891863392807)', 'rgb(1.0, 0.6364742361471414, 0.33815827481581706)', 'rgb(1.0, 0.6269238058941065, 0.3323547994796596)', 'rgb(1.0, 0.6172782212897929, 0.3265387128400833)', 'rgb(1.0, 0.6075389463388169, 0.3207102355902552)', 'rgb(1.0, 0.5977074592660937, 0.3148695888935079)', 'rgb(1.0, 0.5877852522924732, 0.30901699437494745)', 'rgb(1.0, 0.5777738314082512, 0.3031526741130436)', 'rgb(1.0, 0.5676747161445903, 0.29727685063120274)', 'rgb(1.0, 0.5574894393428858, 0.29138974688932473)', 'rgb(1.0, 0.5472195469221114, 0.28549158627534216)', 'rgb(1.0, 0.5368665976441802, 0.27958259259674395)', 'rgb(1.0, 0.5264321628773561, 0.273662990072083)', 'rgb(1.0, 0.5159178263577514, 0.2677330033224681)', 'rgb(1.0, 0.5053251839489484, 0.2617928573630405)', 'rgb(1.0, 0.4946558433997788, 0.2558427775944356)', 'rgb(1.0, 0.4839114241003016, 0.24988298979423082)', 'rgb(1.0, 0.4730935568360101, 0.24391372010837717)', 'rgb(1.0, 0.4622038835403133, 0.2379351950426188)', 'rgb(1.0, 0.4512440570453229, 0.2319476414538982)', 'rgb(1.0, 0.44021574083098747, 0.22595128654174773)', 'rgb(1.0, 0.4291206087726091, 0.2199463578396687)', 'rgb(1.0, 0.41796034488678324, 0.21393308320649734)', 'rgb(1.0, 0.40673664307580004, 0.20791169081775923)', 'rgb(1.0, 0.3954512068705424, 0.2018824091570102)', 'rgb(1.0, 0.38410574917192575, 0.1958454670071669)', 'rgb(1.0, 0.37270199199091436, 0.18980109344182594)', 'rgb(1.0, 0.3612416661871533, 0.18374951781657053)', 'rgb(1.0, 0.3497265112062616, 0.17769096976026882)', 'rgb(1.0, 0.33815827481581756, 0.17162567916635985)', 'rgb(1.0, 0.3265387128400838, 0.1655538761841302)', 'rgb(1.0, 0.31486958889350797, 0.15947579120998084)', 'rgb(1.0, 0.30315267411304364, 0.15339165487868545)', 'rgb(1.0, 0.2913897468893248, 0.14730169805463758)', 'rgb(1.0, 0.279582592596744, 0.14120615182309149)', 'rgb(1.0, 0.26773300332246813, 0.13510524748139308)', 'rgb(1.0, 0.25584277759443586, 0.1289992165302034)', 'rgb(1.0, 0.24391372010837745, 0.12288829066471427)', 'rgb(1.0, 0.23194764145389804, 0.11677270176585626)', 'rgb(1.0, 0.21994635783966857, 0.11065268189150082)', 'rgb(1.0, 0.20791169081775931, 0.10452846326765346)', 'rgb(1.0, 0.19584546700716696, 0.0984002782796427)', 'rgb(1.0, 0.18374951781657037, 0.09226835946330202)', 'rgb(1.0, 0.1716256791663597, 0.08613293949614603)', 'rgb(1.0, 0.1594757912099809, 0.07999425118854168)', 'rgb(1.0, 0.14730169805463766, 0.07385252747487403)', 'rgb(1.0, 0.13510524748139313, 0.06770800140470754)', 'rgb(1.0, 0.12288829066471434, 0.061560906133942946)', 'rgb(1.0, 0.1106526818915011, 0.05541147491597008)', 'rgb(1.0, 0.098400278279643, 0.04925994109281699)', 'rgb(1.0, 0.08613293949614632, 0.043106538086295734)', 'rgb(1.0, 0.07385252747487431, 0.03695149938914507)', 'rgb(1.0, 0.06156090613394323, 0.030795058556170547)', 'rgb(1.0, 0.049259941092817276, 0.024637449195382185)', 'rgb(1.0, 0.03695149938914491, 0.018478904959129915)', 'rgb(1.0, 0.024637449195382025, 0.012319659535238468)', 'rgb(1.0, 0.012319659535238529, 0.006159946638138691)', 'rgb(1.0, 1.2246467991473532e-16, 6.123233995736766e-17)']

inputFile.addEventListener('change', (event) => {
  file = event.target.files[0];
  reader.readAsText(file);
})

reader.addEventListener('load', () => {
  row = reader.result.split('\r\n');
  row.pop();
  sampleName = row.shift().split(',');
  sampleName.shift();
  nSample = sampleName.length;

  for (let i = 0; i < nSample+1; i++) {
    spectra[i] = [];
  }

  row.forEach((value) => {
    for (let i = 0; i < nSample+1; i++) {
      spectra[i].push(value.split(',')[i]);
    }
  })

  spectra.forEach((value) => {
    value.shift();
  })

  xdata = spectra.shift();

  for (let i = 0; i < nSample; i++) {
    trace = {
      x: xdata,
      y: spectra[i],
      type: 'scatter',
      mode: 'lines',
      name: sampleName[i],
      line: {
        color: colorPalette[36*i+1],
        width: 2,
        dash: 'solid'
      }
    }
    lines.push(trace)
  }

  layout = {
    width: 800,
    height: 600,
    xaxis: {
      title: {text: 'Wavelength (nm)', font: {family: 'Arial', size: 20}},
      showgrid: false,
      showline: true,
      mirror: true,
      autotick: false,
      ticks: 'inside',
      tick0: 0,
      dtick: 100,
      ticklen: 4,
      tickwidth: 2,
      tickcolor: '#000000',
      linecolor: '#000000',
      linewidth: 2,
      tickfont: {family: 'Arial', size: 20},
    },
    yaxis: {
      title: {text: 'Absorbance', font: {family: 'Arial', size: 20}},
      showgrid: false,
      zeroline: true,
      showline: true,
      mirror: 'ticks',
      autotick: false,
      ticks: 'inside',
      tick0: 0,
      dtick: 0.1,
      ticklen: 4,
      tickwidth: 2,
      tickcolor: '#000000',
      zerolinecolor: '#000000',
      zerolinewidth: 2,
      linecolor: '#000000',
      linewidth: 2,
      tickfont: {family: 'Arial', size: 20},
    },
    legend: {
      borderwidth: 1,
      title: {text: '', font: {family: 'Arial', size: 20}},
    }
  };
  Plotly.newPlot('myDiv', lines, layout);

})


const graphWidth = document.getElementById('graphWidth')
graphWidth.addEventListener('change', (event) => {
  layout.width = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const graphHeight = document.getElementById('graphHeight');
graphHeight.addEventListener('change', (event) => {
  layout.height = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisTitleText = document.getElementById('xAxisTitleText');
xAxisTitleText.addEventListener('change', (event) => {
  layout.xaxis.title.text = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisTitleFontSize = document.getElementById('xAxisTitleFontSize');
xAxisTitleFontSize.addEventListener('change', (event) => {
  layout.xaxis.title.font.size = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisTickfontSize = document.getElementById('xAxisTickfontSize');
xAxisTickfontSize.addEventListener('change', (event) => {
  layout.xaxis.tickfont.size = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisMirror = document.getElementById('xAxisMirror');
xAxisMirror.addEventListener('change', (event) => {
  layout.xaxis.mirror = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisTicks = document.getElementById('xAxisTicks');
xAxisTicks.addEventListener('change', (event) => {
  layout.xaxis.ticks = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisDtick = document.getElementById('xAxisDtick');
xAxisDtick.addEventListener('change', (event) => {
  layout.xaxis.dtick = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisTicklen = document.getElementById('xAxisTicklen');
xAxisTicklen.addEventListener('change', (event) => {
  layout.xaxis.ticklen = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisTickwidth = document.getElementById('xAxisTickwidth');
xAxisTickwidth.addEventListener('change', (event) => {
  layout.xaxis.tickwidth = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const xAxisLinewidth = document.getElementById('xAxisLinewidth');
xAxisLinewidth.addEventListener('change', (event) => {
  layout.xaxis.linewidth = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})



const yAxisTitleText = document.getElementById('yAxisTitleText');
yAxisTitleText.addEventListener('change', (event) => {
  layout.yaxis.title.text = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisTitleFontSize = document.getElementById('yAxisTitleFontSize');
yAxisTitleFontSize.addEventListener('change', (event) => {
  layout.yaxis.title.font.size = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisTickfontSize = document.getElementById('yAxisTickfontSize');
yAxisTickfontSize.addEventListener('change', (event) => {
  layout.yaxis.tickfont.size = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisMirror = document.getElementById('yAxisMirror');
yAxisMirror.addEventListener('change', (event) => {
  layout.yaxis.mirror = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisTicks = document.getElementById('yAxisTicks');
yAxisTicks.addEventListener('change', () => {
  layout.yaxis.ticks = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisDtick = document.getElementById('yAxisDtick');
yAxisDtick.addEventListener('change', (event) => {
  layout.yaxis.dtick = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisTicklen = document.getElementById('yAxisTicklen');
yAxisTicklen.addEventListener('change', (event) => {
  layout.yaxis.ticklen = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisTickwidth = document.getElementById('yAxisTickwidth');
yAxisTickwidth.addEventListener('change', (event) => {
  layout.yaxis.tickwidth = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisLinewidth = document.getElementById('yAxisLinewidth');
yAxisLinewidth.addEventListener('change', (event) => {
  layout.yaxis.linewidth = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisZeroline = document.getElementById('yAxisZeroline');
yAxisZeroline.addEventListener('change', (event) => {
  layout.yaxis.zeroline = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const yAxisZerolinewidth = document.getElementById('yAxisZerolinewidth');
yAxisZerolinewidth.addEventListener('change', (event) => {
  layout.yaxis.zerolinewidth = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})



const legendBorderwidth = document.getElementById('legendBorderwidth');
legendBorderwidth.addEventListener('change', (event) => {
  layout.legend.borderwidth = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const legendTitleText = document.getElementById('legendTitleText');
legendTitleText.addEventListener('change', (event) => {
  layout.legend.title.text = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const legendTitleSize = document.getElementById('legendTitleSize');
legendTitleSize.addEventListener('change', (event) => {
  layout.legend.title.size = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const legendX = document.getElementById('legendX');
legendX.addEventListener('change', (event) => {
  layout.legend.x = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const legendY = document.getElementById('legendY');
legendY.addEventListener('change', (event) => {
  layout.legend.y = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})



const traceLineColor = document.getElementById('traceLineColor');
traceLineColor.addEventListener('change', (event) => {
  lines[0].line.color = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const traceLineWidth = document.getElementById('traceLineWidth');
traceLineWidth.addEventListener('change', (event) => {
  lines[0].line.width = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})

const traceLineDash = document.getElementById('traceLineDash');
traceLineDash.addEventListener('change', (event) => {
  lines[0].line.dash = event.target.value;
  Plotly.newPlot('myDiv', lines, layout);
})
